tags:
- name: users
  description: Users API
- name: auth
  description: Authentication API
- name: questions
  description: Questions API
- name: answers
  description: Answers API
- name: comments
  description: Comments API

paths:
  /auth/signup:
    post:
      tags:
      - auth
      summary: Sign up a new user
      parameters:
      - name: body
        in: body
        description: User signup data
        required: true
        schema:
          $ref: '#/definitions/userInput'
      responses:
        201:
          description: 'Created'
          schema:
            $ref: '#/definitions/user'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /auth/login:
    post:
      tags:
      - auth
      summary: Login user
      parameters:
      - name: body
        in: body
        description: User login credentials
        required: true
        schema:
          $ref: '#/definitions/userInput'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

  /auth/logout:
    post:
      tags:
      - auth
      summary: Logout user
      security:
        - AuthMiddleware: []
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

  /users:
    get:
      tags:
      - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
        500:
          description: 'Server Error'

    post:
      tags:
      - users
      summary: Add User
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/userInput'
      responses:
        201:
          description: 'Created'
          schema:
            $ref: '#/definitions/user'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /users/{id}:
    get:
      tags:
      - users
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/user'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    put:
      tags:
      - users
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/userInput'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/user'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    delete:
      tags:
      - users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /questions:
    get:
      tags:
      - questions
      summary: Get All Questions
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/question'
        500:
          description: 'Server Error'

    post:
      tags:
      - questions
      summary: Create Question
      parameters:
      - name: body
        in: body
        description: Question Data
        required: true
        schema:
          $ref: '#/definitions/questionInput'
      responses:
        201:
          description: 'Created'
          schema:
            $ref: '#/definitions/question'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  /questions/{id}:
    get:
      tags:
      - questions
      summary: Get Question By Id
      parameters:
      - name: id
        in: path
        description: Question Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/question'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'

    put:
      tags:
      - questions
      summary: Update Question By Id
      parameters:
      - name: id
        in: path
        description: Question Id
        required: true
        type: integer
      - name: body
        in: body
        description: Question Data
        required: true
        schema:
          $ref: '#/definitions/questionInput'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/question'
        400:
          description: 'Bad Request'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'

    delete:
      tags:
      - questions
      summary: Delete Question By Id
      parameters:
      - name: id
        in: path
        description: Question Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'

definitions:
  userInput:
    type: object
    required:
      - email
      - password
      - name
    properties:
      email:
        type: string
        description: User Email
      password:
        type: string
        description: User Password
      name:
        type: string
        description: User Name

  user:
    type: object
    properties:
      id:
        type: integer
        description: User ID
      name:
        type: string
        description: User Name
      email:
        type: string
        description: User Email
      questions:
        type: array
        items:
          $ref: '#/definitions/question'
      answers:
        type: array
        items:
          $ref: '#/definitions/answer'
      comments:
        type: array
        items:
          $ref: '#/definitions/comment'

  questionInput:
    type: object
    required:
      - title
      - body
    properties:
      title:
        type: string
        description: Question Title
      body:
        type: string
        description: Question Content

  question:
    type: object
    properties:
      id:
        type: integer
        description: Question ID
      title:
        type: string
        description: Question Title
      body:
        type: string
        description: Question Content
      creationDate:
        type: integer
        description: Creation Date Timestamp
      score:
        type: integer
        description: Question Score
      user:
        $ref: '#/definitions/user'
      answers:
        type: array
        items:
          $ref: '#/definitions/answer'
      comments:
        type: array
        items:
          $ref: '#/definitions/comment'

  answer:
    type: object
    properties:
      id:
        type: integer
        description: Answer ID
      body:
        type: string
        description: Answer Content
      creationDate:
        type: integer
        description: Creation Date Timestamp
      score:
        type: integer
        description: Answer Score
      accepted:
        type: boolean
        description: Whether the answer is accepted
      user:
        $ref: '#/definitions/user'
      question:
        $ref: '#/definitions/question'
      comments:
        type: array
        items:
          $ref: '#/definitions/comment'

  comment:
    type: object
    properties:
      id:
        type: integer
        description: Comment ID
      body:
        type: string
        description: Comment Content
      user:
        $ref: '#/definitions/user'

securityDefinitions:
  AuthMiddleware:
    type: apiKey
    name: Authorization
    in: header

schemes:
  - https
  - http